#!bin/bash

# === const ===
# -------------

readonly DOTFILES_PATH=$HOME/dotfiles
readonly REMOTE_URL="https://github.com/Wurzeit/dotfiles.git"

# === colors ===
# --------------

if which tput >/dev/null 2>&1; then
  ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

# === functions ===
# -----------------

has() {
  type "$1" > /dev/null 2>&1
}

dotfiles_logo() {
  echo $BLUE
  cat <<\EOF
      _       _    __ _ _
   __| | ___ | |_ / _(_) | ___  ___
  / _` |/ _ \| __| |_| | |/ _ \/ __|
 | (_| | (_) | |_|  _| | |  __/\__ \
(_)__,_|\___/ \__|_| |_|_|\___||___/
EOF
echo $NORMAL
}

install() {
  if has "$1"; then
    echo "${BOLD}${1} is already exists.$NORMAL"
  else
    echo "Installing ${1}..."
    $2
    if [ $? = 0 ]; then
      echo "${GREEN}Successfully installed ${1}.$NORMAL"
    else
      echo "${RED}An unexpected error occurred when trying to install ${1}.$NORMAL"
      exit 1
    fi
  fi

  return 0
}

download_dotfiles() {
  cd $HOME
  if [ ! -d $DOTFILES_PATH ]; then
    echo "Downloading dotfiles..."
    git clone --recursive $REMOTE_URL $DOTFILES_PATH
    if [ $? = 0 ]; then
      echo "${GREEN}Successfully downloaded dotfiles.$NORMAL"
    else
      echo "${RED}An unexpected error occurred when trying to download clone$NORMAL"
      exit 1
    fi
  else
    echo "${BOLD}dotfiles is already exists.$NORMAL"
  fi
}

install_brew() {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

# === main ===
# ------------

main() {
  sudo echo ""
  dotfiles_logo
  sudo apt update -y
  sudo apt install build-essential procps curl file git -y
  download_dotfiles
  ln -snfv $DOTFILES_PATH/.gitconfig $HOME/.gitconfig
  echo "${GREEN}Successfully link gitconfig.$NORMAL"
  echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> $HOME/.profile
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  install "brew" install_brew
  install "terminator" "brew install terminator"
  mkdir -pv $HOME/.config/terminator
  ln -snfv $DOTFILES_PATH/.config/terminator/config $HOME/.config/terminator/config
  echo "${GREEN}Successfully link terminator settings.$NORMAL"
  install "fish" "brew install fish"
  mkdir -pv $HOME/.config/fish
  ln -snfv $DOTFILES_PATH/.config/fish/config.fish $HOME/.config/fish/config.fish
  ln -snfv $DOTFILES_PATH/.config/fish/conf.d $HOME/.config/fish/conf.d
  ln -snfv $DOTFILES_PATH/.config/fish/functions $HOME/.config/fish/functions
  ln -snfv $DOTFILES_PATH/.config/fish/fish_plugins $HOME./config/fish/functions
  sudo chsh -s $(which fish)
  echo "${GREEN}Successfully link fish shell settings.$NORMAL"
  install "tmux" "brew install tmux"
  ln -snfv $DOTFILES_PATH/.config/tmux/.tmux.conf $HOME/.tmux.conf
  echo "${GREEN}Successfully link tmux settings.$NORMAL"
  install "nvim" "brew install neovim"
  mkdir -pv $HOME/.config/nvim
  ln -snfv $DOTFILES_PATH/.config/nvim/init.lua $HOME/.config/nvim/init.lua
  ln -snfv $DOTFILES_PATH/.config/nvim/lua $HOME/.config/nvim/lua
  echo "${GREEN}Successfully link nvim settings.$NORMAL"
  curl -fLo ~/.local/share/nvim/site/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim --create-dirs https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim
  echo "${GREEN}Successfully install jetpack.$NORMAL"
  neovim -c "JetpackSync"
}

main

exit 0
